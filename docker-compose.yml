version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres-db:
    image: postgres:15-alpine
    container_name: pos-postgres-db
    restart: always
    environment:
      POSTGRES_DB: pos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2003
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "9898:5432"  # Puerto externo 9898 como solicita la tarea
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Scripts de inicialización
    networks:
      - pos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Spring Boot
  pos-api:
    build: 
      context: .
      dockerfile: Dockerfile
    image: miguelzhunio/pos-api:latest 
    container_name: pos-spring-api
    restart: always
    environment:
      # Configuración para conectar con PostgreSQL en Docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/pos
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 2003
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION: "true"
      SPRING_SQL_INIT_MODE: always
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - pos-network
    volumes:
      - ./logs:/app/logs  # Para logs de la aplicación

# Volúmenes para persistencia de datos
volumes:
  postgres_data:
    driver: local

# Red personalizada
networks:
  pos-network:
    driver: bridge
